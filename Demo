// Vid 2  
// Inheritance
 internal class Child : Parent
 {
     public int Z {get; set; }
     public Child(int X, int Y, int Z) : base(X, Y)
     {
         this.Z = Z;

     }
     public override string ToString()
     {
         return $"X: {X}, Y: {Y}, Z: {Z}";

     }
 }
 internal class Parent
 {
     public int X { get; set; }

     public int Y { get; set; }
     public void Fun01() 
     {
         Console.WriteLine("Iam Parent [Base] ");
     }
     public Parent(int X, int Y) 
     {
         this.X = X;
         this.Y = Y;
     }


     public override string ToString()
     {
         return $"X: {X}, Y: {Y}";
     }

 }

// Vid 3
// Relationship Between Classes 
// 1. Inheritance: is a Relationship Ex : FullTimeEmployee is a Employee
// 2. Aggregation: has a Relatinship Order has an Item
2.1. Composition : Order Has A Item, Room Has a Wall
2.2. Association : 


// Vid 4 
// Polymorphism Methods Overloading 

// There are more than one function (in the Same scope [class - struct]])
// these have the same NAME but with different Signature
// (count - type - order) parameters

// Vid 6 

// 3.2. Polymorphism Methods (Functions) Overriding
 // override or hide
// There are more than one functions [in different class] these have the same Name and
// the same signature but with different behaviour
// Must be Not Private and Virtual
//  How to apply override
// 1. Apply override using 'new' Keyword
// 2. Apply override using 'override' Keyword


// Vid 7 
//Binding
// Static Binding : CLR Will Bind the Function Call Based On  Reference Type

// Dynamic Binding : CLR Will Bind the Function Call Based On Object Type 

// Vid 9 
//  Binding Ex 
class TypeA
{
    public int A {get; set; }
    public new void Fun01()
    {
     Console WriteLine(value: "Fun01 From TypeA");
    }

     public override void Fun02()
    {
     Console WriteLine(value: $"A: {A]");
    }
}
class TypeB : TypeA
{
    public int B { get; set; }

    public new void Fun01()
     {
    Console. WriteLine(:"Fun01 From TypeB");
     }
    public override void Fun02()
     {
     Console WriteLine(value: $"A: {A}, B: {B}")
     }
}
class TypeC : TypeB
{
    public int C { get; set; }

    public new void Fun01()
     {
    Console. WriteLine(:"Fun01 From TypeC");
     }
    public override void Fun02()
     {
     Console WriteLine(value: $"A: {A}, B: {B}, C : {C}")
     }
}

class TypeD : TypeC
{
    public int D { get; set; }

    public new void Fun01()
     {
    Console. WriteLine(:"Fun01 From TypeD");
     }
    public override void Fun02()
     {
     Console WriteLine(value: $"A: {A}, B: {B}, C : {C} , D : {D} ")
     }
}
